name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: eu-west-1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set environment
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        fi

    - name: Get AWS Account ID
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
        echo "TEMPLATE_BUCKET=pdf-processing-pipeline-templates-$ACCOUNT_ID-$AWS_REGION" >> $GITHUB_ENV

    - name: Create template bucket
      run: |
        if ! aws s3api head-bucket --bucket $TEMPLATE_BUCKET 2>/dev/null; then
          echo "Creating template bucket: $TEMPLATE_BUCKET"
          aws s3api create-bucket --bucket $TEMPLATE_BUCKET --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
          aws s3api put-bucket-versioning --bucket $TEMPLATE_BUCKET --versioning-configuration Status=Enabled
        fi

    - name: Upload templates
      run: |
        aws s3 sync infrastructure/nested-stacks/ s3://$TEMPLATE_BUCKET/templates/nested-stacks/
        aws s3 cp infrastructure/main-test.yaml s3://$TEMPLATE_BUCKET/templates/

    - name: Validate CloudFormation templates
      run: |
        aws cloudformation validate-template --template-url "https://$TEMPLATE_BUCKET.s3.$AWS_REGION.amazonaws.com/templates/main-test.yaml"
        aws cloudformation validate-template --template-url "https://$TEMPLATE_BUCKET.s3.$AWS_REGION.amazonaws.com/templates/nested-stacks/s3.yaml"
        aws cloudformation validate-template --template-url "https://$TEMPLATE_BUCKET.s3.$AWS_REGION.amazonaws.com/templates/nested-stacks/dynamodb.yaml"

    - name: Deploy CloudFormation stack
      run: |
        STACK_NAME="pdf-processing-pipeline-$ENVIRONMENT-test"

        if aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_REGION 2>/dev/null; then
          echo "Updating existing stack: $STACK_NAME"
          aws cloudformation update-stack \
            --stack-name $STACK_NAME \
            --template-url "https://$TEMPLATE_BUCKET.s3.$AWS_REGION.amazonaws.com/templates/main-test.yaml" \
            --parameters ParameterKey=Environment,ParameterValue=$ENVIRONMENT ParameterKey=ProjectName,ParameterValue=pdf-processing-pipeline ParameterKey=S3BucketPrefix,ParameterValue=pdf-proc ParameterKey=TemplateS3Bucket,ParameterValue=$TEMPLATE_BUCKET \
            --capabilities CAPABILITY_IAM
        else
          echo "Creating new stack: $STACK_NAME"
          aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-url "https://$TEMPLATE_BUCKET.s3.$AWS_REGION.amazonaws.com/templates/main-test.yaml" \
            --parameters ParameterKey=Environment,ParameterValue=$ENVIRONMENT ParameterKey=ProjectName,ParameterValue=pdf-processing-pipeline ParameterKey=S3BucketPrefix,ParameterValue=pdf-proc ParameterKey=TemplateS3Bucket,ParameterValue=$TEMPLATE_BUCKET \
            --capabilities CAPABILITY_IAM
        fi

    - name: Wait for deployment
      run: |
        STACK_NAME="pdf-processing-pipeline-$ENVIRONMENT-test"
        echo "Waiting for stack deployment to complete..."
        aws cloudformation wait stack-create-complete --stack-name $STACK_NAME --region $AWS_REGION || \
        aws cloudformation wait stack-update-complete --stack-name $STACK_NAME --region $AWS_REGION

        echo "Deployment completed successfully!"
        aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_REGION --query 'Stacks[0].Outputs' --output table

    - name: Show created resources
      run: |
        STACK_NAME="pdf-processing-pipeline-$ENVIRONMENT-test"
        echo "=== Stack Resources ==="
        aws cloudformation list-stack-resources --stack-name $STACK_NAME --region $AWS_REGION --query 'StackResourceSummaries[*].[LogicalResourceId,ResourceType,ResourceStatus]' --output table
